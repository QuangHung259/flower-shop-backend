//controllers/paymentController.js
const Payment = require("../models/Payment");
const Order = require("../models/Order");
const axios = require("axios");
const crypto = require("crypto");

const createMomoPayment = async (req, res) => {
  try {
    const { orderId, amount } = req.body;
    const userId = req.user._id;

    if (!orderId || !amount) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n" });
    }

    // T·∫°o b·∫£n ghi thanh to√°n trong DB
    const payment = await Payment.create({
      order: orderId,
      user: userId,
      amount,
      method: "momo",
      status: "pending",
    });

    // G·ªçi API Momo n·∫øu b·∫°n mu·ªën t√≠ch h·ª£p th·∫≠t s·ª±
    // ƒê√¢y ch·ªâ l√† m·∫´u d·ªØ li·ªáu, b·∫°n c·∫ßn ƒëƒÉng k√Ω t√†i kho·∫£n Momo ƒë·ªÉ c√≥ accessKey v√† secretKey
    /*
    const momoRes = await axios.post("https://test-payment.momo.vn/v2/gateway/api/create", {
      partnerCode: process.env.MOMO_PARTNER_CODE,
      accessKey: process.env.MOMO_ACCESS_KEY,
      requestId: `${Date.now()}`,
      amount: amount.toString(),
      orderId: orderId.toString(),
      orderInfo: "Thanh to√°n ƒë∆°n h√†ng",
      returnUrl: "http://localhost:3000/payment-success",
      notifyUrl: "http://localhost:5000/api/payments/momo/callback",
      requestType: "captureWallet",
      signature: "HMAC_SIGNATURE_HERE" // B·∫°n c·∫ßn k√Ω d·ªØ li·ªáu n√†y
    });
    */

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ (gi·∫£ l·∫≠p n·∫øu ch∆∞a d√πng API th·∫≠t)
    res.status(201).json({
      message: "T·∫°o thanh to√°n Momo th√†nh c√¥ng (gi·∫£ l·∫≠p)",
      payment,
    });
  } catch (error) {
    console.error("L·ªói thanh to√°n:", error);
    res.status(500).json({ message: "L·ªói thanh to√°n", error: error.message });
  }
};

const getAllPayments = async (req, res) => {
  try {
    const payments = await Payment.find()
      .populate("user", "fullName email")
      .populate("order", "_id totalAmount status");
    res.json({ payments });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi l·∫•y danh s√°ch thanh to√°n",
      error: err.message,
    });
  }
};

const handleMomoCallback = async (req, res) => {
  try {
    const {
      orderId,
      requestId,
      amount,
      resultCode,
      message,
      signature,
      extraData,
    } = req.body;

    // X√°c th·ª±c ch·ªØ k√Ω (n·∫øu c·∫ßn thi·∫øt)
    // const rawSignature = `...`; // X√¢y d·ª±ng ch·ªØ k√Ω theo t√†i li·ªáu Momo
    // const expectedSignature = crypto
    //   .createHmac("sha256", process.env.MOMO_SECRET_KEY)
    //   .update(rawSignature)
    //   .digest("hex");
    // if (signature !== expectedSignature) {
    //   return res.status(400).json({ message: "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá" });
    // }

    const status = resultCode === 0 ? "completed" : "failed";

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n trong DB
    await Payment.findOneAndUpdate(
      { order: orderId },
      { status },
      { new: true }
    );

    console.log(
      `üì© Callback t·ª´ Momo: ƒê∆°n ${orderId} c√≥ tr·∫°ng th√°i ${status} - ${message}`
    );

    // G·ª≠i ph·∫£n h·ªìi cho Momo
    res.status(200).json({ message: "Callback Momo x·ª≠ l√Ω xong" });
  } catch (error) {
    console.error("‚ùå Callback Momo l·ªói:", error);
    res.status(500).json({ message: "L·ªói callback", error: error.message });
  }
};

const getPaymentsByUser = async (req, res) => {
  const { userId } = req.params;

  try {
    const payments = await Payment.find({ user: userId }).populate(
      "order",
      "_id totalAmount status"
    );
    res.json({ payments });
  } catch (err) {
    res.status(500).json({
      message: "Kh√¥ng th·ªÉ l·∫•y thanh to√°n ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

const createCodPayment = async (req, res) => {
  try {
    const { orderId, amount } = req.body;
    const userId = req.user._id;

    if (!orderId || !amount) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n" });
    }

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // T·∫°o b·∫£n ghi thanh to√°n v·ªõi tr·∫°ng th√°i ƒë√£ ho√†n t·∫•t lu√¥n
    const payment = await Payment.create({
      order: orderId,
      user: userId,
      amount,
      method: "cod",
      status: "completed",
    });

    res.status(201).json({
      message: "Thanh to√°n COD th√†nh c√¥ng",
      payment,
    });
  } catch (error) {
    console.error("L·ªói thanh to√°n COD:", error);
    res
      .status(500)
      .json({ message: "L·ªói thanh to√°n COD", error: error.message });
  }
};

module.exports = {
  createMomoPayment,
  getAllPayments,
  createCodPayment,
  handleMomoCallback,
  getPaymentsByUser, // ƒê·∫£m b·∫£o xu·∫•t h√†m n√†y
};
